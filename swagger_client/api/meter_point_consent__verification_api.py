# coding: utf-8

"""
    Glowmarkt User System

    The document enlists and describes the APIs for the User.  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MeterPointConsentVerificationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_meter_point_consent_renewal(self, mpxn, **kwargs):  # noqa: E501
        """Get meter point consent renewals  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meter_point_consent_renewal(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :return: MeterPointConsentAndVerificationRenewalRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_meter_point_consent_renewal_with_http_info(mpxn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_meter_point_consent_renewal_with_http_info(mpxn, **kwargs)  # noqa: E501
            return data

    def get_meter_point_consent_renewal_with_http_info(self, mpxn, **kwargs):  # noqa: E501
        """Get meter point consent renewals  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meter_point_consent_renewal_with_http_info(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :return: MeterPointConsentAndVerificationRenewalRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpxn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_meter_point_consent_renewal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpxn' is set
        if ('mpxn' not in params or
                params['mpxn'] is None):
            raise ValueError("Missing the required parameter `mpxn` when calling `get_meter_point_consent_renewal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpxn' in params:
            path_params['mpxn'] = params['mpxn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status/mpxn/{mpxn}/renewal', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeterPointConsentAndVerificationRenewalRes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_meter_point_consent_revocation(self, mpxn, **kwargs):  # noqa: E501
        """Get meter point consent revocations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meter_point_consent_revocation(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :return: MeterPointConsentAndVerificationRenewalRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_meter_point_consent_revocation_with_http_info(mpxn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_meter_point_consent_revocation_with_http_info(mpxn, **kwargs)  # noqa: E501
            return data

    def get_meter_point_consent_revocation_with_http_info(self, mpxn, **kwargs):  # noqa: E501
        """Get meter point consent revocations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meter_point_consent_revocation_with_http_info(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :return: MeterPointConsentAndVerificationRenewalRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpxn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_meter_point_consent_revocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpxn' is set
        if ('mpxn' not in params or
                params['mpxn'] is None):
            raise ValueError("Missing the required parameter `mpxn` when calling `get_meter_point_consent_revocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpxn' in params:
            path_params['mpxn'] = params['mpxn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status/mpxn/{mpxn}/revocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeterPointConsentAndVerificationRenewalRes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_meter_point_verification_consent_status(self, **kwargs):  # noqa: E501
        """API to retrieve user's meter points' consent and verification  # noqa: E501

        API to retrieve user's meter points' consent and verification status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_meter_point_verification_consent_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserMeterPointConsentAndVerification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_meter_point_verification_consent_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_meter_point_verification_consent_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_meter_point_verification_consent_status_with_http_info(self, **kwargs):  # noqa: E501
        """API to retrieve user's meter points' consent and verification  # noqa: E501

        API to retrieve user's meter points' consent and verification status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_meter_point_verification_consent_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserMeterPointConsentAndVerification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_meter_point_verification_consent_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserMeterPointConsentAndVerification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def renew_meter_point_consent(self, mpxn, **kwargs):  # noqa: E501
        """Renew meter point consent  # noqa: E501

        A user can renew their consent to access a meter point's data. The consent can be extended to a maximum of 18 months (default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_meter_point_consent(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :param RenewMeterPointConsentReq body:
        :return: AddUserRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.renew_meter_point_consent_with_http_info(mpxn, **kwargs)  # noqa: E501
        else:
            (data) = self.renew_meter_point_consent_with_http_info(mpxn, **kwargs)  # noqa: E501
            return data

    def renew_meter_point_consent_with_http_info(self, mpxn, **kwargs):  # noqa: E501
        """Renew meter point consent  # noqa: E501

        A user can renew their consent to access a meter point's data. The consent can be extended to a maximum of 18 months (default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_meter_point_consent_with_http_info(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :param RenewMeterPointConsentReq body:
        :return: AddUserRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpxn', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method renew_meter_point_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpxn' is set
        if ('mpxn' not in params or
                params['mpxn'] is None):
            raise ValueError("Missing the required parameter `mpxn` when calling `renew_meter_point_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpxn' in params:
            path_params['mpxn'] = params['mpxn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status/mpxn/{mpxn}/renewal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddUserRes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def renew_meter_point_consent_bulk(self, **kwargs):  # noqa: E501
        """Renew consent for a number of meterpoints  # noqa: E501

        A user can renew their consent for a number of meterpoints.  The consent can be extended to a maximum of 18 months (default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_meter_point_consent_bulk(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MeterPointConsentManagementBulkReq body:
        :return: MeterPointConsentManagementBulkRenewalRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.renew_meter_point_consent_bulk_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.renew_meter_point_consent_bulk_with_http_info(**kwargs)  # noqa: E501
            return data

    def renew_meter_point_consent_bulk_with_http_info(self, **kwargs):  # noqa: E501
        """Renew consent for a number of meterpoints  # noqa: E501

        A user can renew their consent for a number of meterpoints.  The consent can be extended to a maximum of 18 months (default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_meter_point_consent_bulk_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MeterPointConsentManagementBulkReq body:
        :return: MeterPointConsentManagementBulkRenewalRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method renew_meter_point_consent_bulk" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status/mpxns/renewal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeterPointConsentManagementBulkRenewalRes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def renew_meter_point_consent_revoke_bulk(self, **kwargs):  # noqa: E501
        """Revoke consent for a number of meterpoints  # noqa: E501

        A user can revoke their consent for a number of meterpoints.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_meter_point_consent_revoke_bulk(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MeterPointConsentManagementBulkReq body:
        :return: MeterPointConsentManagementBulkRevocationRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.renew_meter_point_consent_revoke_bulk_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.renew_meter_point_consent_revoke_bulk_with_http_info(**kwargs)  # noqa: E501
            return data

    def renew_meter_point_consent_revoke_bulk_with_http_info(self, **kwargs):  # noqa: E501
        """Revoke consent for a number of meterpoints  # noqa: E501

        A user can revoke their consent for a number of meterpoints.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_meter_point_consent_revoke_bulk_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MeterPointConsentManagementBulkReq body:
        :return: MeterPointConsentManagementBulkRevocationRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method renew_meter_point_consent_revoke_bulk" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status/mpxns/revocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeterPointConsentManagementBulkRevocationRes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_meter_point_consent(self, mpxn, **kwargs):  # noqa: E501
        """Revoke meter point consent  # noqa: E501

        A user can renew their consent to access a meter point's data. The consent can be extended to a maximum of 18 months (default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_meter_point_consent(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :param RenewMeterPointConsentReq body:
        :return: AddUserRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_meter_point_consent_with_http_info(mpxn, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_meter_point_consent_with_http_info(mpxn, **kwargs)  # noqa: E501
            return data

    def revoke_meter_point_consent_with_http_info(self, mpxn, **kwargs):  # noqa: E501
        """Revoke meter point consent  # noqa: E501

        A user can renew their consent to access a meter point's data. The consent can be extended to a maximum of 18 months (default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_meter_point_consent_with_http_info(mpxn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpxn: meter point number (required)
        :param RenewMeterPointConsentReq body:
        :return: AddUserRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpxn', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_meter_point_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpxn' is set
        if ('mpxn' not in params or
                params['mpxn'] is None):
            raise ValueError("Missing the required parameter `mpxn` when calling `revoke_meter_point_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpxn' in params:
            path_params['mpxn'] = params['mpxn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appKeys', 'applicationId', 'devUserToken', 'orgAppKeys', 'userId', 'userToken']  # noqa: E501

        return self.api_client.call_api(
            '/user/verification/status/mpxn/{mpxn}/revocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddUserRes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
