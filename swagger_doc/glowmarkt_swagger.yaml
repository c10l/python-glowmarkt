basePath: /api/v0-1/
definitions:
  AccessDeniedError:
    properties:
      error:
        example: Access denied
        type: string
    type: object
  AccountProfile:
    properties:
      InformationAboutDashboard:
        example:
          displayInfo:
            agg: daily
            funct: max
            metric: consumption
            timeframe: lastMonth
        type: object
      profileName:
        example: DashBoard
        type: string
    required:
    - profileName
    type: object
  AccountRes:
    properties:
      accountId:
        example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
        type: string
      active:
        type: boolean
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      createdAt:
        format: date-time
        type: string
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      email:
        example: scotty@enterprise.st
        type: string
      name:
        example: Montgomery Christopher Jorgensen
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
      updatedAt:
        format: date-time
        type: string
      userId:
        example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
        type: string
      username:
        example: scotty
        type: string
    type: object
  AccountSession:
    properties:
      sessionvalue1:
        example: 192.168.1.1
        type: string
      sessionvalue2:
        example: f2420615-a3e5-4346-9fb4-1cb33cf4844c
        type: string
    type: object
  AccountStatus:
    properties:
      accountId:
        example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
        type: string
      active:
        type: boolean
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      createdAt:
        format: date-time
        type: string
      directory:
        properties:
          data:
            properties:
              tokenExpiryDate:
                example: '2019-03-29T09:24:28.000Z'
                format: date-time
                type: string
              tokenIssueDate:
                example: '2019-03-22T09:24:28.000Z'
                format: date-time
                type: string
            type: object
        type: object
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
      updatedAt:
        format: date-time
        type: string
    type: object
  AddAccountReq:
    properties:
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      username:
        example: scotty
        type: string
    required:
    - username
    - directoryId
    type: object
  AddMobileTokenToAccountReq:
    properties:
      newToken:
        example: ExampleToKEN
        type: string
    required:
    - newToken
    type: object
  AddUserReq:
    properties:
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      email:
        example: scotty@enterprise.st
        type: string
      name:
        example: Montgomery Christopher Jorgensen
        type: string
      password:
        example: '@$tr0ngP@$'
        type: string
      username:
        example: scotty
        type: string
    required:
    - name
    - username
    - email
    - password
    - directoryId
    - applicationId
    type: object
  AddUserRes:
    properties:
      active:
        type: boolean
      applications:
        items:
          properties:
            accountId:
              example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
              type: string
            active:
              type: boolean
            applicationId:
              example: 0537b17c-ab62-491c-8085-9ac2b6206346
              type: string
          type: object
        type: array
      createdAt:
        format: date-time
        type: string
      status:
        example: unverified
        type: string
      updatedAt:
        format: date-time
        type: string
      userId:
        example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
        type: string
    type: object
  ApiResponse:
    properties:
      code:
        format: int32
        type: integer
      message:
        type: string
      type:
        type: string
    type: object
  CreateUserReq:
    properties:
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      username:
        example: scotty
        type: string
    required:
    - username
    - directoryId
    type: object
  CreateUserRes:
    properties:
      active:
        type: boolean
      applications:
        items:
          properties:
            accountId:
              example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
              type: string
            active:
              type: boolean
            applicationId:
              example: 0537b17c-ab62-491c-8085-9ac2b6206346
              type: string
          type: object
        type: array
      createdAt:
        format: date-time
        type: string
      status:
        example: active
        type: string
      updatedAt:
        format: date-time
        type: string
      userId:
        example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
        type: string
    type: object
  Error:
    properties:
      error:
        type: string
    type: object
    xml:
      name: Error
  ExchangeAuthorizationCodeWithAccessRes:
    properties:
      access_token:
        example: 9defd68267e8de48a65bb5a9faaef8b81391c7ae69c60ccb826d8060cf500afac1f1441b3067a445af7bbd91ec
        type: string
      expires_in:
        example: 604800
        type: number
      refresh_type:
        example: 0d3c5b212c6e0d6a09a10d8d613353a32267c009856779a49c258bae52eb7511705ae4916b98441b3067ad445a
        type: string
      token_type:
        example: bearer
        type: string
    type: object
  GeneratePasswordResetTokenUserReq:
    properties:
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      username:
        example: scotty
        type: string
    required:
    - username
    - applicationId
    type: object
  GenerateVerificationTokenUserReq:
    properties:
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      password:
        example: '@$tr0ngP@$'
        type: string
      username:
        example: scotty
        type: string
    required:
    - username
    - password
    - applicationId
    type: object
  IncorrectElementsError:
    properties:
      error:
        example: incorrect elements
        type: string
    type: object
  InternalServerError:
    properties:
      error:
        example: An error has occurred
        type: string
    type: object
  IsValidRes:
    properties:
      valid:
        example: true
        type: boolean
    type: object
  MeterPointConsentAndVerification:
    properties:
      isValidUntil:
        example: '2024-12-13T12:02:09.865Z'
        format: date-time
        type: string
      isVerified:
        example: true
        type: boolean
      mpxn:
        example: 123456789012
        type: string
      mpxnKey:
        enum:
        - mpan
        - mprn
        example: mpan
        type: string
    type: object
  MeterPointConsentAndVerificationRenewal:
    properties:
      auditReference:
        properties:
          applicationId:
            example: 0537b17c-ab62-491c-8085-9ac2b6206346
            type: string
        type: object
      createdAt:
        example: now
        format: date-time
        type: string
      meterPointVerificationRenewalId:
        example: aa2464fa-bca2-e22a-83b1-14e9819c54d2
        type: string
      mpxn:
        example: 123456789012
        type: string
      mpxnKey:
        enum:
        - mpan
        - mprn
        example: mpan
        type: string
      renewedBy:
        properties:
          key:
            example: userId
            type: string
          value:
            example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
            type: string
        type: object
    type: object
  MeterPointConsentAndVerificationRenewalRes:
    properties:
      meterPointRenewals:
        items:
          $ref: '#/definitions/MeterPointConsentAndVerificationRenewal'
        type: array
      valid:
        example: true
        type: boolean
    type: object
  MeterPointConsentAndVerificationRevocation:
    properties:
      auditReference:
        properties:
          applicationId:
            example: 0537b17c-ab62-491c-8085-9ac2b6206346
            type: string
        type: object
      createdAt:
        example: now
        format: date-time
        type: string
      meterPointVerificationRevocationId:
        example: aa2464fa-bca2-e22a-83b1-14e9819c54d2
        type: string
      mpxn:
        example: 123456789012
        type: string
      mpxnKey:
        enum:
        - mpan
        - mprn
        example: mpan
        type: string
      revokedBy:
        properties:
          key:
            example: userId
            type: string
          value:
            example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
            type: string
        type: object
    type: object
  MeterPointConsentAndVerificationRevocationRes:
    properties:
      meterPointRenewals:
        items:
          $ref: '#/definitions/MeterPointConsentAndVerificationRevocation'
        type: array
      valid:
        example: true
        type: boolean
    type: object
  MeterPointConsentManagementBulkRenewalRes:
    properties:
      meterPointVerificationRenewals:
        items:
          $ref: '#/definitions/MeterPointVerificationRenewalElem'
        type: array
      valid:
        type: boolean
    type: object
  MeterPointConsentManagementBulkReq:
    properties:
      meterPoints:
        items:
          $ref: '#/definitions/MpxnElem'
        type: array
    type: object
  MeterPointConsentManagementBulkRevocationRes:
    properties:
      meterPointRevocations:
        items:
          $ref: '#/definitions/MpxnElem'
        type: array
      valid:
        type: boolean
    type: object
  MeterPointVerificationRenewalElem:
    properties:
      isValidUntil:
        example: '2026-03-05T23:59:59'
        type: string
      meterPointVerificationRenewalId:
        example: bfdf0b3d-42a6-46f0-8142-39c4d5413b58
        type: string
      mpxn:
        example: '123456789012'
        type: string
      valid:
        example: true
        type: boolean
    type: object
  MeterPointVerificationRevocationElem:
    properties:
      isValidUntil:
        example: '2026-03-05T23:59:59'
        type: string
      meterPointVerificationRevocationId:
        example: bfdf0b3d-42a6-46f0-8142-39c4d5413b58
        type: string
      mpxn:
        example: '123456789012'
        type: string
      valid:
        example: true
        type: boolean
    type: object
  MissingElementsError:
    properties:
      error:
        example: missing elements
        type: string
    type: object
  MpxnElem:
    properties:
      mpxn:
        example: '123456789012'
        type: string
    type: object
  OAuthAccessRefreshToken:
    properties:
      client_id:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: boolean
      client_secret:
        example: 2b9d75b3ae36bOQHe28202
        type: string
      code:
        example: 2b9d75b3ae36bdf3b66724b89996094ba724278784
        type: string
      grant_type:
        example: authorization_code
        type: string
    type: object
  OAuthCodeRes:
    properties:
      accountId:
        example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
        type: string
      code:
        example: 2b9d75b3ae36bdf3b66724b89996094ba724278784
        type: string
      exp:
        example: 1559824668
        type: number
      name:
        example: Montgomery Christopher Jorgensen
        type: string
      valid:
        example: true
        type: boolean
    type: object
    xml:
      name: OAuthCodeRes
  OAuthValidAccessToken:
    allOf:
    - $ref: '#/definitions/AddUserRes'
    properties:
      authenticationFramework:
        example: oauth
        type: string
      status:
        example: active
        type: string
    type: object
  PasswordResetUserReq:
    properties:
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      newPassword:
        example: aV3ry$tr0ngp@$
        type: string
      token:
        example: 8442
        type: string
      username:
        example: scotty
        type: string
    required:
    - username
    - applicationId
    - token
    - newPassword
    type: object
  RemoveMobileTokenToAccountReq:
    properties:
      removeToken:
        example: ExampleToKEN
        type: string
    required:
    - removeToken
    type: object
  RenewMeterPointConsentReq:
    properties:
      isValidUntil:
        example: '2024-12-13T12:02:09.865Z'
        format: date-time
        type: string
    type: object
  RevokeMeterPointConsentReq:
    properties:
      isValidUntil:
        example: now
        format: date-time
        type: string
    type: object
  TokenDocument:
    properties:
      authenticationFramework:
        example: oauth
        type: string
      createdAt:
        example: '2019-06-06T12:02:09.865Z'
        format: date-time
        type: string
      expiresAt:
        example: '2019-06-13T12:02:09.865Z'
        format: date-time
        type: string
      grant_type:
        example: refresh_token
        type: string
      tokenId:
        example: 1aa61ab4-92a0-4f04-b883-e5abdf380523
        type: string
      userId:
        example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
        type: string
    type: object
  UpdateAccountRes:
    properties:
      accountId:
        example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
        type: string
      active:
        type: boolean
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      createdAt:
        example: '2017-10-18T17:06:48.549Z'
        format: date-time
        type: string
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      email:
        example: scotty@enterprise.st
        type: string
      name:
        example: Montgomery Jorgensen
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
      updatedAt:
        format: date-time
        type: string
      userId:
        example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
        type: string
      username:
        example: scotty
        type: string
    type: object
  UserChangeUsernameAdminBodyReq:
    properties:
      status:
        example: active
        type: string
      username:
        example: scotty
        type: string
    type: object
  UserMeterPointConsentAndVerification:
    properties:
      meterPointVerification:
        items:
          $ref: '#/definitions/MeterPointConsentAndVerification'
        type: array
    type: object
  UserNameLoginReq:
    properties:
      directoryId:
        example: 2e214dec-bf44-4f58-83d0-2fa89d023e90
        type: string
      password:
        example: '@$tr0ngP@$'
        type: string
      username:
        example: scotty
        type: string
    required:
    - username
    - password
    type: object
  VerifyUserReq:
    properties:
      applicationId:
        example: 0537b17c-ab62-491c-8085-9ac2b6206346
        type: string
      password:
        example: '@$tr0ngP@$'
        type: string
      token:
        example: 8442
        type: string
      username:
        example: scotty
        type: string
    required:
    - token
    - username
    - password
    - applicationId
    type: object
externalDocs:
  description: Find out more about Glowmarkt
  url: https://glowmarkt.com/
host: api.glowmarkt.com
info:
  description: The document enlists and describes the APIs for the User.
  license:
    name: "Copyright \xA9 2012-25 by Hildebrand Technology Limited"
  title: Glowmarkt User System
  version: 1.0.5
paths:
  /account:
    get:
      description: Returns all accounts that belong to an application.
      operationId: getAccounts
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/AccountRes'
            type: array
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Find all accounts of an application
      tags:
      - Account
    post:
      consumes:
      - application/json
      description: This call should be used when a user is registered via  on the
        Glow ecosystem. By providing the username of the user a directory account
        may be added to the application.
      operationId: addAccount
      parameters:
      - description: The information that is used to add an account to an existing
          user.
        in: body
        name: addAccountBody
        schema:
          $ref: '#/definitions/AddAccountReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              accountId:
                example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
                type: string
              applicationId:
                example: 0537b17c-ab62-491c-8085-9ac2b6206346
                type: string
              status:
                example: OK
                type: string
              userId:
                example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
                type: string
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Add an account to an existing user
      tags:
      - Account
  /account/changepassword:
    post:
      consumes:
      - application/json
      description: A user can change their passwrod. They would neeed to have knowledge
        of their previous password and provide it in the body.
      operationId: userChangePassWord
      parameters:
      - description: The information that is needed to change a user's password.
        in: body
        name: userChangePassWord
        schema:
          properties:
            newPassword:
              example: aV3ry$tr0ngp@$
              type: string
            oldPassword:
              example: '@$tr0ngP@$'
              type: string
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            properties:
              error:
                example: weak new password
                type: string
            type: object
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - userToken: []
      - applicationId: []
      summary: Change a user's password
      tags:
      - Account
  /account/email:
    post:
      consumes:
      - application/json
      description: A user can update their email
      operationId: userChangeEmail
      parameters:
      - description: The body contains the user's new email.
        in: body
        name: userChangeEmailBody
        schema:
          properties:
            email:
              example: scotty_eng@enterprise.st
              type: string
          required:
          - email
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Change a user's email
      tags:
      - Account
  /account/name:
    post:
      consumes:
      - application/json
      description: A user can update their name
      operationId: userChangeName
      parameters:
      - description: The body contains the user's new email.
        in: body
        name: userChangeNameBody
        schema:
          properties:
            name:
              example: Montgomery Jorgensen
              type: string
          required:
          - name
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Change a user's name
      tags:
      - Account
  /account/status:
    get:
      description: Returns the status an account.
      operationId: getAccountStatusbyUserToken
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccountStatus'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - userToken: []
      - applicationId: []
      summary: With a given JWT token a user can have their account status verfied.
        If their account is created under an external directory service, this call
        will establish whether a user's token to the external service is still valid.
      tags:
      - Account
  /account/{accountId}:
    delete:
      consumes:
      - application/json
      description: Delete account
      operationId: deleteAccount
      parameters:
      - description: ID of account that is to be deleted
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              accountId:
                example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
                type: string
              status:
                example: inactive
                type: string
              userId:
                example: 69f464fa-bca2-4f2a-83b1-0c69819c5cd0
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - orgAppKeys: []
      - devUserToken: []
      - appKeys: []
      summary: Delete account
      tags:
      - Account
    get:
      description: Returns an account.
      operationId: getAccountbyId
      parameters:
      - description: ID of account that is being queried
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccountRes'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Find specific account of an application.
      tags:
      - Account
    put:
      consumes:
      - application/json
      description: Updates the account s metadata. Elements that can be updated include
        name. This can be used in on an administrative level.
      operationId: updateAccount
      parameters:
      - description: ID of user that needs to be updated
        in: path
        name: accountId
        required: true
        type: string
      - description: The elements of user that can be updated.
        in: body
        name: userUpdateBody
        schema:
          properties:
            name:
              example: Montgomery Jorgensen
              type: string
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UpdateAccountRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      - appKeys: []
      summary: Updates the account's metadata.
      tags:
      - Account
  /account/{accountId}/mobileapptoken:
    post:
      consumes:
      - application/json
      description: Mobile app token can be added to the user, who will then be able
        to receive push notifications.
      parameters:
      - description: ID of account that is being queried
        in: path
        name: accountId
        required: true
        type: string
      - description: The information that is needed to assign a mobile token to an
          account.
        in: body
        name: accountAddMobileToken
        schema:
          $ref: '#/definitions/AddMobileTokenToAccountReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Add mobile app token to a user
      tags:
      - Account
    put:
      consumes:
      - application/json
      description: Mobile app tokens can be removed from a user.
      parameters:
      - description: ID of account that is being queried
        in: path
        name: accountId
        required: true
        type: string
      - description: The information that is needed to remove a mobile token to an
          account.
        in: body
        name: accountRemoveMobileToken
        schema:
          $ref: '#/definitions/RemoveMobileTokenToAccountReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Remove a mobile app token to a user
      tags:
      - Account
  /account/{accountId}/status:
    get:
      description: Returns the status an account.
      operationId: getAccountStatusbyId
      parameters:
      - description: ID of account that is being queried
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccountStatus'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Find the status of a specified account. If the account is using an
        external directory service, this call will confirm whether the user is authenticated
        against it. This call requires administrative application level credentials.
      tags:
      - Account
  /accountprofile:
    get:
      description: Returns all the profileNames of profiles an account has saved.
      operationId: getAccountProfile
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              accountId:
                example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
                type: string
              profileNames:
                example:
                - DashBoard
                - Settings
                items:
                  type: string
                type: array
            type: object
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Find all the profiles of an account
      tags:
      - Account Profile
    post:
      consumes:
      - application/json
      description: Create an account profile under a given profileName. profileName
        is a required field. Please note that anything under the profileName will
        be overwritten.
      operationId: addAccountProfile
      parameters:
      - description: The information that is used to create a devuser.
        in: body
        name: addAccountProfile
        schema:
          $ref: '#/definitions/AccountProfile'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              devUserId:
                example: 6ccb3612-4cdc-469e-8574-6007f3c54084
                type: string
              profileName:
                example: DashBoard
                type: string
              status:
                example: OK
                type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Create an account profile under a given profileName.
      tags:
      - Account Profile
  /accountprofile/{profileName}:
    get:
      description: Returns an application's group.
      operationId: getAccountProfilebyProfileName
      parameters:
      - description: profileName of the system to be retrieved
        in: path
        name: profileName
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccountProfile'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Find specific group of application
      tags:
      - Account Profile
  /accountsession:
    get:
      description: Returns the session of an account
      operationId: getAccountSession
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/AccountSession'
            - type: object
            properties:
              valid:
                type: boolean
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: get the session of an account
      tags:
      - Account Session
    put:
      consumes:
      - application/json
      description: Update fields of an account session. The fields that are updated
        are completely overwritten if they exist.
      operationId: updateAccountSession
      parameters:
      - description: The information that is used to create a devuser.
        in: body
        name: updateAccountProfile
        schema:
          $ref: '#/definitions/AccountSession'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/AccountSession'
            - type: object
            properties:
              status:
                example: OK
                type: string
              valid:
                type: boolean
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Update an account session.
      tags:
      - accountsession
  /auth:
    get:
      description: Checks whether a user token is valid.
      operationId: tokencheck
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              accountId:
                example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
                type: string
              applicationId:
                example: 0537b17c-ab62-491c-8085-9ac2b6206346
                type: string
              exp:
                description: Timestamp of token expiry date
                example: 1509010921
                type: integer
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Checks whether a user token is valid.
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: Autheticates the user and generates a JWT token.
      operationId: usernamelogin
      parameters:
      - description: The ID of the application
        in: header
        name: applicationId
        required: true
        type: string
      - description: The information that is required to authenticate an account.
        in: body
        name: UsernameLoginDetails
        required: true
        schema:
          $ref: '#/definitions/UserNameLoginReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              accountId:
                example: ffe4f42e-7c1a-4ea3-9ec8-087d4a1071e6
                type: string
              applicationId:
                example: 0537b17c-ab62-491c-8085-9ac2b6206346
                type: string
              exp:
                description: Timestamp of token expiry date
                example: 1509010921
                type: integer
              name:
                example: Arthur Dent
                type: string
              token:
                description: JWT token
                example: eyJhbGciO37iIsInR5cCI6IkpXVCJ9.eyJ0b2tlbkhhc2giOiI0Y2FmMGVlYmRjNDk2NjAxZDI3ZDk2NzdjM2MxN2JhMDBlZGRmOTNiZDk5MjlmYjgyMWZk6453NzliOWNlYmY0ODZiOTVjZWZhNDI3MjY3NjhiYzAxNWMiLCJpYXQiOjE1MDg0MDYxMjEsImV4cCI6MTUwOTAxMDkyMX0.3iOew-W5YJBd7DK0kFgvWItAkxKjruurkTupM
                type: string
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: authenticate an account
      tags:
      - auth
  /auth/deleteToken:
    delete:
      consumes:
      - application/json
      description: Delete the token the account used to make this call.
      operationId: deleteToken
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            properties:
              valid:
                example: false
                type: boolean
            type: object
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: delete a token
      tags:
      - auth
  /auth/newToken:
    get:
      description: An account provides an old token and gets a new one generated.
      operationId: newToken
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              exp:
                description: Timestamp of token expiry date
                example: 1509010921
                type: integer
              token:
                description: A new valid token for an account
                example: eyJhbGciO37iIsInR5cCI6IkpXVCJ9.eyJ0b2tlbkhhc2giOiI0Y2FmMGVlYmRjNDk2NjAxZDI3ZDk2NzdjM2MxN2JhMDBlZGRmOTNiZDk5MjlmYjgyMWZk6453NzliOWNlYmY0ODZiOTVjZWZhNDI3MjY3NjhiYzAxNWMiLCJpYXQiOjE1MDg0MDYxMjEsImV4cCI6MTUwOTAxMDkyMX0.3iOew-W5YJBd7DK0kFgvWItAkxKjruurkTupM
                type: string
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Generate a new token for an account.
      tags:
      - auth
  /auth/oauth:
    get:
      consumes:
      - application/json
      description: The user system supports an OAuth 2.0 Authorization Code Grant.
        This call validates that a generated access key is valid.
      operationId: validateOAuthAccessToken
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OAuthValidAccessToken'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - oAccessAuthToken: []
      summary: Check and validate an Oauth Access token.
      tags:
      - OAuth
    post:
      consumes:
      - application/json
      description: The user system supports an OAuth 2.0 Authorization Code Grant.
        This call authenticates a user and generates an OAuth 2.0 Authorization Code
        Grant.
      operationId: generateOAuthorizationCode
      parameters:
      - description: The ID of the application
        in: header
        name: applicationId
        required: true
        type: string
      - description: The information that is required to authenticate an account.
        in: body
        name: UsernameLoginDetails
        required: true
        schema:
          $ref: '#/definitions/UserNameLoginReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OAuthCodeRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Authenticate a user and generate an OAuth 2.0 Authorization Code Grant.
      tags:
      - OAuth
  /auth/oauth/access:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: The user system supports an OAuth 2.0 Authorization Code Grant.
        This call generates an access and refresh token from an OAuth 2.0 Authorization
        Code Grant. This API can also be used to generate a new access token with
        a given refresh token. Instead of using the authorization code in the body
        of the request (code), use the refresh token (refresh_token).
      operationId: exchangeAuthorizationCodeWithAccess
      parameters:
      - description: The information that is required to authenticate an account.
        in: body
        name: ExchangeAuthorizationCodeWithAccessBody
        required: true
        schema:
          $ref: '#/definitions/OAuthAccessRefreshToken'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExchangeAuthorizationCodeWithAccessRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Exchange the Authorization Code for an Access Token.
      tags:
      - OAuth
  /auth/token:
    get:
      description: This call enables a customer to view all the tokens that have been
        generated and used for their accounts. This includes all the JWT and OAuth
        tokens. By enabling this a user can then manage and monitor the access to
        their accounts.
      operationId: getTokenOfUser
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/TokenDocument'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Returns all the tokens that are active and valid for a specified user.
      tags:
      - auth
  /auth/token/{tokenId}:
    delete:
      consumes:
      - application/json
      description: This call enables an user to delete and token and revoke access.
        JWT as well as OAuth tokens can be deleted.
      operationId: deleteTokenById
      parameters:
      - description: GUID of token that is to be deleted
        in: path
        name: tokenId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/IsValidRes'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Deletes a token, specified by its tokenId.
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a User a directory account for username and password login
        using this action. More specifically this is a registration process which
        creates a user and adds an account to the given application id. Self-Registration
        process should use this action. This call requires no authentication.
      operationId: addUser
      parameters:
      - description: The information that is used to create a user.
        in: body
        name: addUserBody
        schema:
          $ref: '#/definitions/AddUserReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AddUserRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Create a user
      tags:
      - User
  /user:
    get:
      description: Returns a user.
      operationId: getUserbyUsername
      parameters:
      - description: The username of user that is being queried (lowercase, trimmed
          etc). Please note that this API is prone to errors if the username contains
          characters that are affected by URL encoding.
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AddUserRes'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Find specific user that has an account in an application from the username.
      tags:
      - User
    post:
      consumes:
      - application/json
      description: This call can be used by an application to create a user. No verification
        will be required
      operationId: createUser
      parameters:
      - description: The information that is used to create a user.
        in: body
        name: createUserBody
        schema:
          $ref: '#/definitions/CreateUserReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CreateUserRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Create a user
      tags:
      - User
  /user/resetpassword:
    post:
      consumes:
      - application/json
      description: This call generates a 4 digit token and sends it via second channel
        of communication over to the user (at the moment the only second channel of
        communication supported is email). The user can then use this token to reset
        their password.
      operationId: generateUserPasswordResetToken
      parameters:
      - description: The information that is needed to generate a password reset token.
        in: body
        name: generatePasswordResetTokenUserReq
        schema:
          $ref: '#/definitions/GeneratePasswordResetTokenUserReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Generate a token that can be used by user to reset their password.
      tags:
      - User
    put:
      consumes:
      - application/json
      description: This call generates a 4 digit token and sends it via second channel
        of communication over to the user (at the moment the only second channel of
        communication supported is email).
      operationId: resetPasswordUser
      parameters:
      - description: The information that is used to reset a user's password.
        in: body
        name: resetPasswordUserBody
        schema:
          $ref: '#/definitions/PasswordResetUserReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: A user resets their password
      tags:
      - User
  /user/verification/status:
    get:
      consumes:
      - application/json
      description: API to retrieve user's meter points' consent and verification status
      operationId: getUserMeterPointVerificationConsentStatus
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserMeterPointConsentAndVerification'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: API to retrieve user's meter points' consent and verification
      tags:
      - Meter Point Consent & Verification
  /user/verification/status/mpxn/{mpxn}/renewal:
    get:
      consumes:
      - application/json
      operationId: getMeterPointConsentRenewal
      parameters:
      - description: meter point number
        in: path
        name: mpxn
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MeterPointConsentAndVerificationRenewalRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: Get meter point consent renewals
      tags:
      - Meter Point Consent & Verification
    post:
      consumes:
      - application/json
      description: A user can renew their consent to access a meter point's data.
        The consent can be extended to a maximum of 18 months (default).
      operationId: renewMeterPointConsent
      parameters:
      - description: meter point number
        in: path
        name: mpxn
        required: true
        type: string
      - in: body
        name: Payload
        schema:
          $ref: '#/definitions/RenewMeterPointConsentReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AddUserRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: Renew meter point consent
      tags:
      - Meter Point Consent & Verification
  /user/verification/status/mpxn/{mpxn}/revocation:
    get:
      consumes:
      - application/json
      operationId: getMeterPointConsentRevocation
      parameters:
      - description: meter point number
        in: path
        name: mpxn
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MeterPointConsentAndVerificationRenewalRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: Get meter point consent revocations
      tags:
      - Meter Point Consent & Verification
    post:
      consumes:
      - application/json
      description: A user can renew their consent to access a meter point's data.
        The consent can be extended to a maximum of 18 months (default).
      operationId: revokeMeterPointConsent
      parameters:
      - description: meter point number
        in: path
        name: mpxn
        required: true
        type: string
      - in: body
        name: Payload
        schema:
          $ref: '#/definitions/RenewMeterPointConsentReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AddUserRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: Revoke meter point consent
      tags:
      - Meter Point Consent & Verification
  /user/verification/status/mpxns/renewal:
    post:
      consumes:
      - application/json
      description: A user can renew their consent for a number of meterpoints.  The
        consent can be extended to a maximum of 18 months (default).
      operationId: renewMeterPointConsentBulk
      parameters:
      - in: body
        name: Payload
        schema:
          $ref: '#/definitions/MeterPointConsentManagementBulkReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MeterPointConsentManagementBulkRenewalRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: Renew consent for a number of meterpoints
      tags:
      - Meter Point Consent & Verification
  /user/verification/status/mpxns/revocation:
    post:
      consumes:
      - application/json
      description: A user can revoke their consent for a number of meterpoints.
      operationId: renewMeterPointConsentRevokeBulk
      parameters:
      - in: body
        name: Payload
        schema:
          $ref: '#/definitions/MeterPointConsentManagementBulkReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MeterPointConsentManagementBulkRevocationRes'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
        userId: []
      - applicationId: []
        orgAppKeys: []
        userId: []
      - applicationId: []
        devUserToken: []
        userId: []
      - applicationId: []
        userToken: []
      summary: Revoke consent for a number of meterpoints
      tags:
      - Meter Point Consent & Verification
  /user/verify:
    post:
      consumes:
      - application/json
      description: This call generates a 4 digit token and sends it via second channel
        of communication over to the user (at the moment the only second channel of
        communication supported is email).
      operationId: generateUserVerificationToken
      parameters:
      - description: The information that is used to create to generate an email verification
          token.
        in: body
        name: generateVerificationTokenUserReq
        schema:
          $ref: '#/definitions/GenerateVerificationTokenUserReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Generate a user verification token
      tags:
      - User
    put:
      consumes:
      - application/json
      description: This call generates a 4 digit token and sends it via second channel
        of communication over to the user (at the moment the only second channel of
        communication supported is email).
      operationId: verifyUser
      parameters:
      - description: The information that is used to create a devuser.
        in: body
        name: verifyDevUser
        schema:
          $ref: '#/definitions/VerifyUserReq'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              status:
                example: active
                type: string
              userId:
                example: 6ccb3612-4cdc-469e-8574-6007f3c54084
                type: string
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/MissingElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      summary: Verify a user verification token
      tags:
      - User
  /user/{userId}:
    delete:
      description: Deletes a user.
      operationId: deleteUserbyId
      parameters:
      - description: ID of user that is being queried
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/IsValidRes'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Delete specific user. This will delete all the accounts of a user.
        Please refer to delete account API. This API requires specific permissions.
      tags:
      - User
    get:
      description: Returns a user.
      operationId: getUserbyId
      parameters:
      - description: ID of user that is being queried
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AddUserRes'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '404':
          description: Not Found
          schema:
            example: null
            type: string
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - appKeys: []
      - applicationId: []
        orgAppKeys: []
      - applicationId: []
        devUserToken: []
      summary: Find specific user that has an account in an application.
      tags:
      - User
  /user/{userId}/username:
    put:
      consumes:
      - application/json
      description: API to update a user's username
      operationId: updateUsernameUserId
      parameters:
      - description: ID of user that is being queried
        in: path
        name: userId
        required: true
        type: string
      - description: The body contains the user's new email.
        in: body
        name: UserChangeUsernameAdminBodyReq
        schema:
          properties:
            status:
              example: active
              type: string
            username:
              example: scotty_eng@enterprise.st
              type: string
          required:
          - username
          - status
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              valid:
                type: boolean
            type: object
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IncorrectElementsError'
        '401':
          description: Unauthorised
          schema:
            $ref: '#/definitions/AccessDeniedError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/InternalServerError'
      security:
      - applicationId: []
        userToken: []
      summary: Change a user's username
      tags:
      - User
schemes:
- https
securityDefinitions:
  appKeys:
    type: basic
  applicationId:
    in: header
    name: applicationId
    type: apiKey
  devUserToken:
    in: header
    name: token
    type: apiKey
  internalUserToken:
    in: header
    name: token
    type: apiKey
  oAccessAuthToken:
    in: header
    name: token
    type: apiKey
  orgAppKeys:
    type: basic
  organizationId:
    in: header
    name: organizationId
    type: apiKey
  userId:
    in: header
    name: userId
    type: apiKey
  userToken:
    in: header
    name: token
    type: apiKey
swagger: '2.0'
tags:
- name: User
- name: Meter Point Consent & Verification
- name: Account
- name: Account Profile
- name: Account Session
- name: Auth
- name: OAuth

