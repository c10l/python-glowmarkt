# coding: utf-8

"""
    Glowmarkt User System

    The document enlists and describes the APIs for the User.  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_framework': 'str',
        'created_at': 'datetime',
        'expires_at': 'datetime',
        'grant_type': 'str',
        'token_id': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'authentication_framework': 'authenticationFramework',
        'created_at': 'createdAt',
        'expires_at': 'expiresAt',
        'grant_type': 'grant_type',
        'token_id': 'tokenId',
        'user_id': 'userId'
    }

    def __init__(self, authentication_framework=None, created_at=None, expires_at=None, grant_type=None, token_id=None, user_id=None):  # noqa: E501
        """TokenDocument - a model defined in Swagger"""  # noqa: E501
        self._authentication_framework = None
        self._created_at = None
        self._expires_at = None
        self._grant_type = None
        self._token_id = None
        self._user_id = None
        self.discriminator = None
        if authentication_framework is not None:
            self.authentication_framework = authentication_framework
        if created_at is not None:
            self.created_at = created_at
        if expires_at is not None:
            self.expires_at = expires_at
        if grant_type is not None:
            self.grant_type = grant_type
        if token_id is not None:
            self.token_id = token_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def authentication_framework(self):
        """Gets the authentication_framework of this TokenDocument.  # noqa: E501


        :return: The authentication_framework of this TokenDocument.  # noqa: E501
        :rtype: str
        """
        return self._authentication_framework

    @authentication_framework.setter
    def authentication_framework(self, authentication_framework):
        """Sets the authentication_framework of this TokenDocument.


        :param authentication_framework: The authentication_framework of this TokenDocument.  # noqa: E501
        :type: str
        """

        self._authentication_framework = authentication_framework

    @property
    def created_at(self):
        """Gets the created_at of this TokenDocument.  # noqa: E501


        :return: The created_at of this TokenDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TokenDocument.


        :param created_at: The created_at of this TokenDocument.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this TokenDocument.  # noqa: E501


        :return: The expires_at of this TokenDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this TokenDocument.


        :param expires_at: The expires_at of this TokenDocument.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def grant_type(self):
        """Gets the grant_type of this TokenDocument.  # noqa: E501


        :return: The grant_type of this TokenDocument.  # noqa: E501
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this TokenDocument.


        :param grant_type: The grant_type of this TokenDocument.  # noqa: E501
        :type: str
        """

        self._grant_type = grant_type

    @property
    def token_id(self):
        """Gets the token_id of this TokenDocument.  # noqa: E501


        :return: The token_id of this TokenDocument.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenDocument.


        :param token_id: The token_id of this TokenDocument.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def user_id(self):
        """Gets the user_id of this TokenDocument.  # noqa: E501


        :return: The user_id of this TokenDocument.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TokenDocument.


        :param user_id: The user_id of this TokenDocument.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
