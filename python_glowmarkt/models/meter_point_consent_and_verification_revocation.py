# coding: utf-8

"""
    Glowmarkt User System

    The document enlists and describes the APIs for the User.  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeterPointConsentAndVerificationRevocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_reference': 'MeterPointConsentAndVerificationRenewalAuditReference',
        'created_at': 'datetime',
        'meter_point_verification_revocation_id': 'str',
        'mpxn': 'str',
        'mpxn_key': 'str',
        'revoked_by': 'MeterPointConsentAndVerificationRenewalRenewedBy'
    }

    attribute_map = {
        'audit_reference': 'auditReference',
        'created_at': 'createdAt',
        'meter_point_verification_revocation_id': 'meterPointVerificationRevocationId',
        'mpxn': 'mpxn',
        'mpxn_key': 'mpxnKey',
        'revoked_by': 'revokedBy'
    }

    def __init__(self, audit_reference=None, created_at=None, meter_point_verification_revocation_id=None, mpxn=None, mpxn_key=None, revoked_by=None):  # noqa: E501
        """MeterPointConsentAndVerificationRevocation - a model defined in Swagger"""  # noqa: E501
        self._audit_reference = None
        self._created_at = None
        self._meter_point_verification_revocation_id = None
        self._mpxn = None
        self._mpxn_key = None
        self._revoked_by = None
        self.discriminator = None
        if audit_reference is not None:
            self.audit_reference = audit_reference
        if created_at is not None:
            self.created_at = created_at
        if meter_point_verification_revocation_id is not None:
            self.meter_point_verification_revocation_id = meter_point_verification_revocation_id
        if mpxn is not None:
            self.mpxn = mpxn
        if mpxn_key is not None:
            self.mpxn_key = mpxn_key
        if revoked_by is not None:
            self.revoked_by = revoked_by

    @property
    def audit_reference(self):
        """Gets the audit_reference of this MeterPointConsentAndVerificationRevocation.  # noqa: E501


        :return: The audit_reference of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :rtype: MeterPointConsentAndVerificationRenewalAuditReference
        """
        return self._audit_reference

    @audit_reference.setter
    def audit_reference(self, audit_reference):
        """Sets the audit_reference of this MeterPointConsentAndVerificationRevocation.


        :param audit_reference: The audit_reference of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :type: MeterPointConsentAndVerificationRenewalAuditReference
        """

        self._audit_reference = audit_reference

    @property
    def created_at(self):
        """Gets the created_at of this MeterPointConsentAndVerificationRevocation.  # noqa: E501


        :return: The created_at of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MeterPointConsentAndVerificationRevocation.


        :param created_at: The created_at of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def meter_point_verification_revocation_id(self):
        """Gets the meter_point_verification_revocation_id of this MeterPointConsentAndVerificationRevocation.  # noqa: E501


        :return: The meter_point_verification_revocation_id of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :rtype: str
        """
        return self._meter_point_verification_revocation_id

    @meter_point_verification_revocation_id.setter
    def meter_point_verification_revocation_id(self, meter_point_verification_revocation_id):
        """Sets the meter_point_verification_revocation_id of this MeterPointConsentAndVerificationRevocation.


        :param meter_point_verification_revocation_id: The meter_point_verification_revocation_id of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :type: str
        """

        self._meter_point_verification_revocation_id = meter_point_verification_revocation_id

    @property
    def mpxn(self):
        """Gets the mpxn of this MeterPointConsentAndVerificationRevocation.  # noqa: E501


        :return: The mpxn of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :rtype: str
        """
        return self._mpxn

    @mpxn.setter
    def mpxn(self, mpxn):
        """Sets the mpxn of this MeterPointConsentAndVerificationRevocation.


        :param mpxn: The mpxn of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :type: str
        """

        self._mpxn = mpxn

    @property
    def mpxn_key(self):
        """Gets the mpxn_key of this MeterPointConsentAndVerificationRevocation.  # noqa: E501


        :return: The mpxn_key of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :rtype: str
        """
        return self._mpxn_key

    @mpxn_key.setter
    def mpxn_key(self, mpxn_key):
        """Sets the mpxn_key of this MeterPointConsentAndVerificationRevocation.


        :param mpxn_key: The mpxn_key of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :type: str
        """
        allowed_values = ["mpan", "mprn"]  # noqa: E501
        if mpxn_key not in allowed_values:
            raise ValueError(
                "Invalid value for `mpxn_key` ({0}), must be one of {1}"  # noqa: E501
                .format(mpxn_key, allowed_values)
            )

        self._mpxn_key = mpxn_key

    @property
    def revoked_by(self):
        """Gets the revoked_by of this MeterPointConsentAndVerificationRevocation.  # noqa: E501


        :return: The revoked_by of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :rtype: MeterPointConsentAndVerificationRenewalRenewedBy
        """
        return self._revoked_by

    @revoked_by.setter
    def revoked_by(self, revoked_by):
        """Sets the revoked_by of this MeterPointConsentAndVerificationRevocation.


        :param revoked_by: The revoked_by of this MeterPointConsentAndVerificationRevocation.  # noqa: E501
        :type: MeterPointConsentAndVerificationRenewalRenewedBy
        """

        self._revoked_by = revoked_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeterPointConsentAndVerificationRevocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeterPointConsentAndVerificationRevocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
