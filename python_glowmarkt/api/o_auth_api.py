# coding: utf-8

"""
Glowmarkt User System

The document enlists and describes the APIs for the User.  # noqa: E501

OpenAPI spec version: 1.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_glowmarkt.api_client import ApiClient


class OAuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exchange_authorization_code_with_access(
        self, client_id, client_secret, code, grant_type, **kwargs
    ):  # noqa: E501
        """Exchange the Authorization Code for an Access Token.  # noqa: E501

        The user system supports an OAuth 2.0 Authorization Code Grant. This call generates an access and refresh token from an OAuth 2.0 Authorization Code Grant. This API can also be used to generate a new access token with a given refresh token. Instead of using the authorization code in the body of the request (code), use the refresh token (refresh_token).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_authorization_code_with_access(client_id, client_secret, code, grant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool client_id: (required)
        :param str client_secret: (required)
        :param str code: (required)
        :param str grant_type: (required)
        :return: ExchangeAuthorizationCodeWithAccessRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.exchange_authorization_code_with_access_with_http_info(
                client_id, client_secret, code, grant_type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.exchange_authorization_code_with_access_with_http_info(
                client_id, client_secret, code, grant_type, **kwargs
            )  # noqa: E501
            return data

    def exchange_authorization_code_with_access_with_http_info(
        self, client_id, client_secret, code, grant_type, **kwargs
    ):  # noqa: E501
        """Exchange the Authorization Code for an Access Token.  # noqa: E501

        The user system supports an OAuth 2.0 Authorization Code Grant. This call generates an access and refresh token from an OAuth 2.0 Authorization Code Grant. This API can also be used to generate a new access token with a given refresh token. Instead of using the authorization code in the body of the request (code), use the refresh token (refresh_token).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_authorization_code_with_access_with_http_info(client_id, client_secret, code, grant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool client_id: (required)
        :param str client_secret: (required)
        :param str code: (required)
        :param str grant_type: (required)
        :return: ExchangeAuthorizationCodeWithAccessRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["client_id", "client_secret", "code", "grant_type"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_authorization_code_with_access" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'client_id' is set
        if "client_id" not in params or params["client_id"] is None:
            raise ValueError(
                "Missing the required parameter `client_id` when calling `exchange_authorization_code_with_access`"
            )  # noqa: E501
        # verify the required parameter 'client_secret' is set
        if "client_secret" not in params or params["client_secret"] is None:
            raise ValueError(
                "Missing the required parameter `client_secret` when calling `exchange_authorization_code_with_access`"
            )  # noqa: E501
        # verify the required parameter 'code' is set
        if "code" not in params or params["code"] is None:
            raise ValueError(
                "Missing the required parameter `code` when calling `exchange_authorization_code_with_access`"
            )  # noqa: E501
        # verify the required parameter 'grant_type' is set
        if "grant_type" not in params or params["grant_type"] is None:
            raise ValueError(
                "Missing the required parameter `grant_type` when calling `exchange_authorization_code_with_access`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "client_id" in params:
            form_params.append(("client_id", params["client_id"]))  # noqa: E501
        if "client_secret" in params:
            form_params.append(("client_secret", params["client_secret"]))  # noqa: E501
        if "code" in params:
            form_params.append(("code", params["code"]))  # noqa: E501
        if "grant_type" in params:
            form_params.append(("grant_type", params["grant_type"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth/oauth/access",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ExchangeAuthorizationCodeWithAccessRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def generate_o_authorization_code(self, body, application_id, **kwargs):  # noqa: E501
        """Authenticate a user and generate an OAuth 2.0 Authorization Code Grant.  # noqa: E501

        The user system supports an OAuth 2.0 Authorization Code Grant. This call authenticates a user and generates an OAuth 2.0 Authorization Code Grant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_o_authorization_code(body, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserNameLoginReq body: The information that is required to authenticate an account. (required)
        :param str application_id: The ID of the application (required)
        :return: OAuthCodeRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.generate_o_authorization_code_with_http_info(
                body, application_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.generate_o_authorization_code_with_http_info(
                body, application_id, **kwargs
            )  # noqa: E501
            return data

    def generate_o_authorization_code_with_http_info(
        self, body, application_id, **kwargs
    ):  # noqa: E501
        """Authenticate a user and generate an OAuth 2.0 Authorization Code Grant.  # noqa: E501

        The user system supports an OAuth 2.0 Authorization Code Grant. This call authenticates a user and generates an OAuth 2.0 Authorization Code Grant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_o_authorization_code_with_http_info(body, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserNameLoginReq body: The information that is required to authenticate an account. (required)
        :param str application_id: The ID of the application (required)
        :return: OAuthCodeRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "application_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_o_authorization_code" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `generate_o_authorization_code`"
            )  # noqa: E501
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `generate_o_authorization_code`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if "application_id" in params:
            header_params["applicationId"] = params["application_id"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth/oauth",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="OAuthCodeRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def validate_o_auth_access_token(self, **kwargs):  # noqa: E501
        """Check and validate an Oauth Access token.  # noqa: E501

        The user system supports an OAuth 2.0 Authorization Code Grant. This call validates that a generated access key is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_o_auth_access_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OAuthValidAccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.validate_o_auth_access_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.validate_o_auth_access_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def validate_o_auth_access_token_with_http_info(self, **kwargs):  # noqa: E501
        """Check and validate an Oauth Access token.  # noqa: E501

        The user system supports an OAuth 2.0 Authorization Code Grant. This call validates that a generated access key is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_o_auth_access_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OAuthValidAccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_o_auth_access_token" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oAccessAuthToken"]  # noqa: E501

        return self.api_client.call_api(
            "/auth/oauth",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="OAuthValidAccessToken",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
