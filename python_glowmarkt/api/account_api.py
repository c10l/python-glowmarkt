# coding: utf-8

"""
Glowmarkt User System

The document enlists and describes the APIs for the User.  # noqa: E501

OpenAPI spec version: 1.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_glowmarkt.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_account_id_mobileapptoken_post(self, account_id, **kwargs):  # noqa: E501
        """Add mobile app token to a user  # noqa: E501

        Mobile app token can be added to the user, who will then be able to receive push notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_account_id_mobileapptoken_post(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :param AddMobileTokenToAccountReq body: The information that is needed to assign a mobile token to an account.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.account_account_id_mobileapptoken_post_with_http_info(
                account_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.account_account_id_mobileapptoken_post_with_http_info(
                account_id, **kwargs
            )  # noqa: E501
            return data

    def account_account_id_mobileapptoken_post_with_http_info(
        self, account_id, **kwargs
    ):  # noqa: E501
        """Add mobile app token to a user  # noqa: E501

        Mobile app token can be added to the user, who will then be able to receive push notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_account_id_mobileapptoken_post_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :param AddMobileTokenToAccountReq body: The information that is needed to assign a mobile token to an account.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["account_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_account_id_mobileapptoken_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'account_id' is set
        if "account_id" not in params or params["account_id"] is None:
            raise ValueError(
                "Missing the required parameter `account_id` when calling `account_account_id_mobileapptoken_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "account_id" in params:
            path_params["accountId"] = params["account_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["applicationId", "userToken"]  # noqa: E501

        return self.api_client.call_api(
            "/account/{accountId}/mobileapptoken",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def account_account_id_mobileapptoken_put(self, account_id, **kwargs):  # noqa: E501
        """Remove a mobile app token to a user  # noqa: E501

        Mobile app tokens can be removed from a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_account_id_mobileapptoken_put(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :param RemoveMobileTokenToAccountReq body: The information that is needed to remove a mobile token to an account.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.account_account_id_mobileapptoken_put_with_http_info(
                account_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.account_account_id_mobileapptoken_put_with_http_info(
                account_id, **kwargs
            )  # noqa: E501
            return data

    def account_account_id_mobileapptoken_put_with_http_info(
        self, account_id, **kwargs
    ):  # noqa: E501
        """Remove a mobile app token to a user  # noqa: E501

        Mobile app tokens can be removed from a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_account_id_mobileapptoken_put_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :param RemoveMobileTokenToAccountReq body: The information that is needed to remove a mobile token to an account.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["account_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_account_id_mobileapptoken_put" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'account_id' is set
        if "account_id" not in params or params["account_id"] is None:
            raise ValueError(
                "Missing the required parameter `account_id` when calling `account_account_id_mobileapptoken_put`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "account_id" in params:
            path_params["accountId"] = params["account_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["applicationId", "userToken"]  # noqa: E501

        return self.api_client.call_api(
            "/account/{accountId}/mobileapptoken",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def add_account(self, **kwargs):  # noqa: E501
        """Add an account to an existing user  # noqa: E501

        This call should be used when a user is registered via  on the Glow ecosystem. By providing the username of the user a directory account may be added to the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAccountReq body: The information that is used to add an account to an existing user.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_account_with_http_info(self, **kwargs):  # noqa: E501
        """Add an account to an existing user  # noqa: E501

        This call should be used when a user is registered via  on the Glow ecosystem. By providing the username of the user a directory account may be added to the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAccountReq body: The information that is used to add an account to an existing user.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_account" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["appKeys", "applicationId", "devUserToken", "orgAppKeys"]  # noqa: E501

        return self.api_client.call_api(
            "/account",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse200",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_account(self, account_id, **kwargs):  # noqa: E501
        """Delete account  # noqa: E501

        Delete account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is to be deleted (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_account_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_account_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def delete_account_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Delete account  # noqa: E501

        Delete account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is to be deleted (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["account_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'account_id' is set
        if "account_id" not in params or params["account_id"] is None:
            raise ValueError(
                "Missing the required parameter `account_id` when calling `delete_account`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "account_id" in params:
            path_params["accountId"] = params["account_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["appKeys", "devUserToken", "orgAppKeys"]  # noqa: E501

        return self.api_client.call_api(
            "/account/{accountId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2002",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_account_statusby_id(self, account_id, **kwargs):  # noqa: E501
        """Find the status of a specified account. If the account is using an external directory service, this call will confirm whether the user is authenticated against it. This call requires administrative application level credentials.  # noqa: E501

        Returns the status an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_statusby_id(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :return: AccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_account_statusby_id_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_statusby_id_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_statusby_id_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Find the status of a specified account. If the account is using an external directory service, this call will confirm whether the user is authenticated against it. This call requires administrative application level credentials.  # noqa: E501

        Returns the status an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_statusby_id_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :return: AccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["account_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_statusby_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'account_id' is set
        if "account_id" not in params or params["account_id"] is None:
            raise ValueError(
                "Missing the required parameter `account_id` when calling `get_account_statusby_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "account_id" in params:
            path_params["accountId"] = params["account_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["appKeys", "applicationId", "devUserToken", "orgAppKeys"]  # noqa: E501

        return self.api_client.call_api(
            "/account/{accountId}/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AccountStatus",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_account_statusby_user_token(self, **kwargs):  # noqa: E501
        """With a given JWT token a user can have their account status verfied. If their account is created under an external directory service, this call will establish whether a user's token to the external service is still valid.  # noqa: E501

        Returns the status an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_statusby_user_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_account_statusby_user_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_account_statusby_user_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_account_statusby_user_token_with_http_info(self, **kwargs):  # noqa: E501
        """With a given JWT token a user can have their account status verfied. If their account is created under an external directory service, this call will establish whether a user's token to the external service is still valid.  # noqa: E501

        Returns the status an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_statusby_user_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_statusby_user_token" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["applicationId", "userToken"]  # noqa: E501

        return self.api_client.call_api(
            "/account/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AccountStatus",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_accountby_id(self, account_id, **kwargs):  # noqa: E501
        """Find specific account of an application.  # noqa: E501

        Returns an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accountby_id(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :return: AccountRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_accountby_id_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_accountby_id_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_accountby_id_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Find specific account of an application.  # noqa: E501

        Returns an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accountby_id_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of account that is being queried (required)
        :return: AccountRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["account_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accountby_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'account_id' is set
        if "account_id" not in params or params["account_id"] is None:
            raise ValueError(
                "Missing the required parameter `account_id` when calling `get_accountby_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "account_id" in params:
            path_params["accountId"] = params["account_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["appKeys", "applicationId", "devUserToken", "orgAppKeys"]  # noqa: E501

        return self.api_client.call_api(
            "/account/{accountId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AccountRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_accounts(self, **kwargs):  # noqa: E501
        """Find all accounts of an application  # noqa: E501

        Returns all accounts that belong to an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountRes]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Find all accounts of an application  # noqa: E501

        Returns all accounts that belong to an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountRes]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["appKeys", "applicationId", "devUserToken", "orgAppKeys"]  # noqa: E501

        return self.api_client.call_api(
            "/account",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[AccountRes]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_account(self, account_id, **kwargs):  # noqa: E501
        """Updates the account's metadata.  # noqa: E501

        Updates the account s metadata. Elements that can be updated include name. This can be used in on an administrative level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of user that needs to be updated (required)
        :param AccountAccountIdBody body: The elements of user that can be updated.
        :return: UpdateAccountRes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_account_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_account_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def update_account_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Updates the account's metadata.  # noqa: E501

        Updates the account s metadata. Elements that can be updated include name. This can be used in on an administrative level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID of user that needs to be updated (required)
        :param AccountAccountIdBody body: The elements of user that can be updated.
        :return: UpdateAccountRes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["account_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'account_id' is set
        if "account_id" not in params or params["account_id"] is None:
            raise ValueError(
                "Missing the required parameter `account_id` when calling `update_account`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "account_id" in params:
            path_params["accountId"] = params["account_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["appKeys", "applicationId", "devUserToken", "orgAppKeys"]  # noqa: E501

        return self.api_client.call_api(
            "/account/{accountId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UpdateAccountRes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def user_change_email(self, **kwargs):  # noqa: E501
        """Change a user's email  # noqa: E501

        A user can update their email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_email(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountEmailBody body: The body contains the user's new email.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.user_change_email_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_change_email_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_change_email_with_http_info(self, **kwargs):  # noqa: E501
        """Change a user's email  # noqa: E501

        A user can update their email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_email_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountEmailBody body: The body contains the user's new email.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_change_email" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["applicationId", "userToken"]  # noqa: E501

        return self.api_client.call_api(
            "/account/email",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def user_change_name(self, **kwargs):  # noqa: E501
        """Change a user's name  # noqa: E501

        A user can update their name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountNameBody body: The body contains the user's new email.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.user_change_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_change_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_change_name_with_http_info(self, **kwargs):  # noqa: E501
        """Change a user's name  # noqa: E501

        A user can update their name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountNameBody body: The body contains the user's new email.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_change_name" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["applicationId", "userToken"]  # noqa: E501

        return self.api_client.call_api(
            "/account/name",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def user_change_pass_word(self, **kwargs):  # noqa: E501
        """Change a user's password  # noqa: E501

        A user can change their passwrod. They would neeed to have knowledge of their previous password and provide it in the body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_pass_word(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountChangepasswordBody body: The information that is needed to change a user's password.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.user_change_pass_word_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_change_pass_word_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_change_pass_word_with_http_info(self, **kwargs):  # noqa: E501
        """Change a user's password  # noqa: E501

        A user can change their passwrod. They would neeed to have knowledge of their previous password and provide it in the body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_pass_word_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountChangepasswordBody body: The information that is needed to change a user's password.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_change_pass_word" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["applicationId", "userToken"]  # noqa: E501

        return self.api_client.call_api(
            "/account/changepassword",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
